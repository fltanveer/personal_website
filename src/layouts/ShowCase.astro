---
import SocialLinks from "../components/SocialLinks.astro";

import BaseLayout from "./BaseLayout.astro";

export interface Props {
  content: {
    title: string;
    description: string;
    pubDate?: string;
    updatedDate?: string;
    heroImage?: string;
    nextLink?: string;
    previousLink?: string;
  };
  href: string;
}

const includeShowcase = !Astro.url.toString().includes("showcase");

const {
  content: {
    title,
    description,
    pubDate,
    updatedDate,
    heroImage = "/about-me.jpg",
    nextLink,
    previousLink,
  },
} = Astro.props;
---

<BaseLayout content={{ title, description, heroImage }}>
  <div class="showcase__wrapper">
    {
      includeShowcase ? (
        <aside class="hidden left-0 h-16 bg-white md:bg-transparent w-full bottom-0 lg:flex p-2 justify-around items-center shadow md:top-12 md:left-0 md:h-72 md:flex-col md:w-16 md:sticky md:mt-16 z-10 md:shadow-transparent">
          <SocialLinks title={title} />
        </aside>
      ) : null
    }

    <main class="w-full mx-auto showcase-container">
      <article
        class="prose lg:prose-lg xl:prose-lg mt-20 relative mx-auto w-full xl:prose-h1:leading-[1.1] prose-img:mx-auto"
      >
        {heroImage && <img width={900} height={360} src={heroImage} alt="" />}
        <h1>{title}</h1>
        {pubDate && <time>{pubDate}</time>}
        {
          updatedDate && (
            <div>
              Last updated on <time>{updatedDate}</time>
            </div>
          )
        }
        <slot />
      </article>

      <div
        class="flex lg:hidden border-t border-b border-[#f5df36] mt-8 w-full justify-center gap-2 relative"
        id="second-copy"
      >
        <SocialLinks title={title} id="boom" />
      </div>

      {
        Boolean(previousLink) || Boolean(nextLink) ? (
          <div class="flex justify-between w-full mt-12 items-center py-2 font-bold">
            {Boolean(previousLink) ? (
              <a
                href={`/showcase/${previousLink}`}
                class="inline-flex gap-2 items-center text-lg"
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  width="24"
                  height="24"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  aria-hidden="true"
                >
                  <polyline points="15 18 9 12 15 6" />
                </svg>
                Previous Link
              </a>
            ) : (
              <span />
            )}
            {Boolean(nextLink) ? (
              <a
                href={`/showcase/${nextLink}`}
                class="inline-flex gap-2 items-center text-lg"
              >
                Next Link
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  width="24"
                  height="24"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  aria-hidden="true"
                  class="transform rotate-180"
                >
                  <polyline points="15 18 9 12 15 6" />
                </svg>
              </a>
            ) : null}
          </div>
        ) : null
      }
    </main>
  </div>
</BaseLayout>

<style>
  @media (min-width: 1024px) {
    .showcase__wrapper {
      display: grid;
    }
  }
</style>

<script>
  import writeText from "copy-to-clipboard";
  const element = document.getElementById("second-copy");
  if (element) {
    const text = document.getElementById("text");
    const text2 = document.getElementById("boom");
    element.addEventListener("click", () => {
      writeText(window.location.href);
      if (text) {
        text.classList.remove("hidden");
        text.classList.add("block");
        text.classList.add("bounce");

        setTimeout(() => {
          text.classList.add("hidden");
          text.classList.remove("block");
          text.classList.remove("bounce");
        }, 1500);
      }

      if (text2) {
        text2.classList.remove("hidden");
        text2.classList.add("block");
        text2.classList.add("bounce");
        setTimeout(() => {
          text2.classList.add("hidden");
          text2.classList.remove("block");
          text2.classList.remove("bounce");
        }, 1500);
      }
    });
  }
</script>
